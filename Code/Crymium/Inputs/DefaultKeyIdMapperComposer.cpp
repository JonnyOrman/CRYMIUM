#include "DefaultKeyIdMapperComposer.h"
#include "Crymium/Inputs/KeyIdMapper.h"

std::unique_ptr<IKeyIdMapper> DefaultKeyIdMapperComposer::Compose()
{
	auto keyIdMapper = std::make_unique<KeyIdMapper>();

	keyIdMapper->SetMapping(eKI_Backspace, Backspace);
	keyIdMapper->SetMapping(eKI_Tab, Tab);
	keyIdMapper->SetMapping(eKI_Enter, Enter);
	keyIdMapper->SetMapping(eKI_LShift, Shift);
	keyIdMapper->SetMapping(eKI_LCtrl, Ctrl);
	keyIdMapper->SetMapping(eKI_LAlt, Alt);
	keyIdMapper->SetMapping(eKI_Pause, Pause);
	keyIdMapper->SetMapping(eKI_CapsLock, CapsLock);
	keyIdMapper->SetMapping(eKI_Escape, Escape);
	keyIdMapper->SetMapping(eKI_Space, Spacebar);
	keyIdMapper->SetMapping(eKI_PgUp, PageUp);
	keyIdMapper->SetMapping(eKI_PgDn, PageDown);
	keyIdMapper->SetMapping(eKI_End, End);
	keyIdMapper->SetMapping(eKI_Home, Home);
	keyIdMapper->SetMapping(eKI_Left, Left);
	keyIdMapper->SetMapping(eKI_Up, Up);
	keyIdMapper->SetMapping(eKI_Right, Right);
	keyIdMapper->SetMapping(eKI_Down, Down);
	keyIdMapper->SetMapping(eKI_Print, Print);
	keyIdMapper->SetMapping(eKI_Insert, Insert);
	keyIdMapper->SetMapping(eKI_Delete, Delete);
	keyIdMapper->SetMapping(eKI_0, Zero);
	keyIdMapper->SetMapping(eKI_1, One);
	keyIdMapper->SetMapping(eKI_2, Two);
	keyIdMapper->SetMapping(eKI_3, Three);
	keyIdMapper->SetMapping(eKI_4, Four);
	keyIdMapper->SetMapping(eKI_5, Five);
	keyIdMapper->SetMapping(eKI_6, Six);
	keyIdMapper->SetMapping(eKI_7, Seven);
	keyIdMapper->SetMapping(eKI_8, Eight);
	keyIdMapper->SetMapping(eKI_9, Nine);
	keyIdMapper->SetMapping(eKI_A, A);
	keyIdMapper->SetMapping(eKI_B, B);
	keyIdMapper->SetMapping(eKI_C, C);
	keyIdMapper->SetMapping(eKI_D, D);
	keyIdMapper->SetMapping(eKI_E, E);
	keyIdMapper->SetMapping(eKI_F, F);
	keyIdMapper->SetMapping(eKI_G, G);
	keyIdMapper->SetMapping(eKI_H, H);
	keyIdMapper->SetMapping(eKI_I, I);
	keyIdMapper->SetMapping(eKI_J, J);
	keyIdMapper->SetMapping(eKI_K, K);
	keyIdMapper->SetMapping(eKI_L, L);
	keyIdMapper->SetMapping(eKI_M, M);
	keyIdMapper->SetMapping(eKI_N, N);
	keyIdMapper->SetMapping(eKI_O, O);
	keyIdMapper->SetMapping(eKI_P, P);
	keyIdMapper->SetMapping(eKI_Q, Q);
	keyIdMapper->SetMapping(eKI_R, R);
	keyIdMapper->SetMapping(eKI_S, S);
	keyIdMapper->SetMapping(eKI_T, T);
	keyIdMapper->SetMapping(eKI_U, U);
	keyIdMapper->SetMapping(eKI_V, V);
	keyIdMapper->SetMapping(eKI_W, W);
	keyIdMapper->SetMapping(eKI_X, X);
	keyIdMapper->SetMapping(eKI_Y, Y);
	keyIdMapper->SetMapping(eKI_Z, Z);
	keyIdMapper->SetMapping(eKI_NP_0, NumPad0);
	keyIdMapper->SetMapping(eKI_NP_1, NumPad1);
	keyIdMapper->SetMapping(eKI_NP_2, NumPad2);
	keyIdMapper->SetMapping(eKI_NP_3, NumPad3);
	keyIdMapper->SetMapping(eKI_NP_4, NumPad4);
	keyIdMapper->SetMapping(eKI_NP_5, NumPad5);
	keyIdMapper->SetMapping(eKI_NP_6, NumPad6);
	keyIdMapper->SetMapping(eKI_NP_7, NumPad7);
	keyIdMapper->SetMapping(eKI_NP_8, NumPad8);
	keyIdMapper->SetMapping(eKI_NP_9, NumPad9);
	keyIdMapper->SetMapping(eKI_NP_Multiply, NumPadMultiply);
	keyIdMapper->SetMapping(eKI_NP_Add, NumPadAdd);
	keyIdMapper->SetMapping(eKI_NP_Substract, NumPadSubtract);
	keyIdMapper->SetMapping(eKI_NP_Period, NumPadDecimalPoint);
	keyIdMapper->SetMapping(eKI_NP_Divide, NumPadDivide);
	keyIdMapper->SetMapping(eKI_F1, F1);
	keyIdMapper->SetMapping(eKI_F2, F2);
	keyIdMapper->SetMapping(eKI_F3, F3);
	keyIdMapper->SetMapping(eKI_F4, F4);
	keyIdMapper->SetMapping(eKI_F5, F5);
	keyIdMapper->SetMapping(eKI_F6, F6);
	keyIdMapper->SetMapping(eKI_F7, F7);
	keyIdMapper->SetMapping(eKI_F8, F8);
	keyIdMapper->SetMapping(eKI_F9, F9);
	keyIdMapper->SetMapping(eKI_F10, F10);
	keyIdMapper->SetMapping(eKI_F11, F11);
	keyIdMapper->SetMapping(eKI_F12, F12);
	keyIdMapper->SetMapping(eKI_F13, F13);
	keyIdMapper->SetMapping(eKI_F14, F14);
	keyIdMapper->SetMapping(eKI_F15, F15);
	keyIdMapper->SetMapping(eKI_NumLock, NumLock);
	keyIdMapper->SetMapping(eKI_ScrollLock, ScrollLock);
	keyIdMapper->SetMapping(eKI_Semicolon, SemiColon);
	keyIdMapper->SetMapping(eKI_Equals, EqualSign);
	keyIdMapper->SetMapping(eKI_Comma, Comma);
	keyIdMapper->SetMapping(eKI_Minus, Hyphen);
	keyIdMapper->SetMapping(eKI_Period, FullStop);
	keyIdMapper->SetMapping(eKI_Slash, ForwardSlash);
	keyIdMapper->SetMapping(eKI_Apostrophe, Apostrophe);
	keyIdMapper->SetMapping(eKI_LBracket, OpenBracket);
	keyIdMapper->SetMapping(eKI_RBracket, CloseBracket);
	
	return keyIdMapper;
}
